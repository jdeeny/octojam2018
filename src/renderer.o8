:const TILE_HEIGHT 6

:const SPRITE_TOP_LEFT 0
:const SPRITE_TOP_RIGHT 18
:const SPRITE_MIDDLE_LEFT 36
:const SPRITE_MIDDLE_RIGHT 54
:const SPRITE_BOTTOM_LEFT 72
:const SPRITE_BOTTOM_RIGHT 90

:const HEX_CORRECTION_OFFSET 8
:const NEG_HEX_CORRECTION_OFFSET -8
:macro hex-negative direction amount {
	:macro direction hexindex {
		vf := amount hexindex += vf
		if vf == 0 then 
    		hexindex += NEG_HEX_CORRECTION_OFFSET
    }
}
:macro hex-positive direction amount {
	:macro direction hexindex {
		:calc testoffset { HEX_CORRECTION_OFFSET + amount }
		vf := testoffset hexindex += vf
		if vf != 0 then
				hexindex += NEG_HEX_CORRECTION_OFFSET
	}
}
hex-negative HEX_LEFT -2
hex-negative HEX_UP_LEFT -20
hex-negative HEX_UP_RIGHT -18
hex-positive HEX_RIGHT 2
hex-positive HEX_DOWN_LEFT 18
hex-positive HEX_DOWN_RIGHT 20


:alias tileindex v0
:alias planeoffset v1
:alias hexindex v2
:alias spritesegment v3
# composited tile v4 v5 v6 v7 v8 v9
# next input buffer/tmp va vb vc vd ve vf

#updates next tile in stack
: composite-tiles
		#pull index of next tile to update from stack
		i := long dirty-tiles load v0 - v0
		if v0 == 1 then return #no tiles to update
		v0 += -1 save v0
		i += v0 load tileindex - tileindex

		#start by drawing plane 1
		planeoffset := 0

		#get basic tile graphic
		: compo-go-again
		i := long tilemap i += tileindex i += tileindex load vd - ve
		reg-set-i-macro vd ve compo-tile-ptr
		i += planeoffset
		load v4 - v9

		#layer in sprites
		hexindex >>= tileindex
		if vf == 0 begin #the tile is the right side of a hex
				hexindex <<= hexindex
				spritesegment := SPRITE_BOTTOM_RIGHT
				compo-add-sprite
				HEX_DOWN_RIGHT hexindex
				spritesegment := SPRITE_MIDDLE_LEFT
				compo-add-sprite
				HEX_DOWN_LEFT hexindex
				spritesegment := SPRITE_TOP_RIGHT
				compo-add-sprite
		else #the tile is the left side of a hex
				hexindex <<= hexindex
				HEX_DOWN_RIGHT hexindex
				spritesegment := SPRITE_BOTTOM_LEFT
				compo-add-sprite
				HEX_DOWN_LEFT hexindex
				spritesegment := SPRITE_MIDDLE_RIGHT
				compo-add-sprite
				HEX_DOWN_RIGHT hexindex
				spritesegment := SPRITE_TOP_LEFT
				compo-add-sprite
		end
		#save the plane to the frame buffer
		# i := frame-buffer + (tileindex * 12) + planeoffset
		i := long frame-buffer							
		i += tileindex i += tileindex i += tileindex	
		i += tileindex i += tileindex i += tileindex	
		i += tileindex i += tileindex i += tileindex	
		i += tileindex i += tileindex i += tileindex	
		i += planeoffset save v4 - v9

		#go again with plane 2				
		if planeoffset != 0 then return
		planeoffset := TILE_HEIGHT
		jump compo-go-again

: compo-add-sprite
		i := long hex-contents i += hexindex load vd - ve
		if vd == 0 then return #empty hex
		reg-set-i-macro vd ve compo-sprite-ptr
		i += spritesegment

		#mask
		load va - vf
		v9 &= vf v8 &= ve
		v7 &= vd v6 &= vc
		v5 &= vb v4 &= va

		#image
		vf := TILE_HEIGHT i += vf
		i += planeoffset
		load va - vf
		v9 += vf v8 += ve
		v7 += vd v6 += vc
		v5 += vb v4 += va
;

:alias x v0
:alias y v1
:alias itr v2
:alias tile-width v3

#copies frame buffer onto screen
: draw-tiles
	#load the iterator & tile width from memory rather than setting it directly
	#these two values are fixed, though. It's just a faster/smaller way to set them
	i := long screen-offset load x - tile-width
	i := long frame-buffer
	: frame-loop
	loop
		sprite x y 6
		if itr == 179 then return
		itr += 1
		i += tile-width
		x += 7
		if x != 133 then jump frame-loop
			x := 0
			y += 6
			if y == 66 then y := 0
		again
#end draw-tiles


#himem labels
: frame-buffer #2508 bytes
#a stack of tiles to be composited. First value is size of stack + 1
: dirty-tiles 1 # ??? bytes 
# a list of pointers to tile graphics for tiles on screen
: tilemap #
#a list of pointers to sprite data for hexes on screen
: hex-contents #248 bytes
#first two values are x,y positions at which tile 0 is located
#depending on how the screen is scrolled
#next two are fixes values to be used in the screen drawing procedure
: screen-offset
0 0 0 12