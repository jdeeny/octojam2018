
: text_state 1
: text_wrap 0 0 0


# v0 := new_color
: set_text_color
  i := text_state
  save v0 - v0
  ;

# Draw a single glyph
:alias text_color v8
:alias text_id v0
:alias text_glyph_width v0
:alias text_x v4
:alias text_y v5

:alias text_wrap_state vA
:alias text_wrap_x1 vB
:alias text_wrap_x2 vC


: text_draw_glyph
    i := long font_table
    i += text_id
    i += text_id
    load v2 - v3 # load address of glyph
    reg_set_i_v23
    load v0 # load width

    plane 1
    if text_color == 1 then sprite text_x text_y 6
    if text_color == 3 then sprite text_x text_y 6
    plane 2
    if text_color == 2 then sprite text_x text_y 6
    if text_color == 3 then sprite text_x text_y 6
    text_x += text_glyph_width
    ;


:const GLYPH_ESC_CHOICE 0xFD
:const GLYPH_ESC_WORD 0xFE
:const GLYPH_ESC_END 0xFF


# v23 = word address, v4 = x, v5 = y
: text_draw_word
  i := text_state
  load text_color - text_color
  i := text_wrap
  load text_wrap_state - text_wrap_x2
# Draw an entire word
# v23 = word address, v4 = x, v5 = y
: text_draw_word_noreset
  push v2 v3 2 # save the current spot

: text_draw_word_internal
#  i := word_target
#  save v3 - v4
#  math_add_u16_u8imm v3 v4 1
#  push v3 v4 2
#  0xF0 0x00 : word_target 0x00 0x00 # i := long *word
#  load v0 - v0
  reg_set_i_v23
  load v0
  if v0 == GLYPH_ESC_END then jump text_draw_word_end
  if v0 == GLYPH_ESC_WORD then jump text_draw_word_word
  text_draw_glyph



  pop v2 v3 2
  math_add_u16_u8imm v2 v3 1
  push v2 v3 2
  jump text_draw_word_internal
: text_draw_word_end
  pop v2 v3 2
  vF := vF
  ;

: text_draw_word_word
  load v2 - v3
  if text_wrap_state != 0 then text_draw_word_check_wrap
  text_draw_word_noreset
  pop v2 v3 2
  math_add_u16_u8imm v2 v3 3
  push v2 v3 2
  text_x += 3
  jump text_draw_word_internal
  ;

: text_draw_word_check_wrap
  push v2 v5 4
  text_measure_word

  v0 := v4
  pop v4 v5 2
  v0 =- text_wrap_x2
  v0 -= text_x

  if vF == 0 then text_x := text_wrap_x1
  if vF == 0 then text_y += 6
  pop v2 v3 2
  ;


:macro text_clear_wrap {
  i := text_wrap
  v0 := 0
  save v0 - v0
}

:macro text_set_wrap x1 x2 {
  i := text_wrap
  v0 := 1
  v1 := x1
  v2 := x2
  save v0 - v2
}

# Measure an entire word
# v23 = word address
: text_measure_word
  text_x := 0
: text_measure_word_nozero
  push v2 v3 2 # save the current spot

: text_measure_word_internal
  reg_set_i_v23
  load v0
  if v0 == GLYPH_ESC_END then jump text_measure_word_end
  if v0 == GLYPH_ESC_WORD then jump text_measure_word_word
  vF := vF
  text_measure_glyph
  vF := vF

  pop v2 v3 2
  math_add_u16_u8imm v2 v3 1
  push v2 v3 2
  jump text_measure_word_internal
: text_measure_word_end
  pop v2 v3 2
  v4 += -2
  ;

: text_measure_word_word
  load v2 - v3
  text_measure_word_nozero
  pop v2 v3 2
  math_add_u16_u8imm v2 v3 3
  push v2 v3 2
  text_x += 3
  jump text_measure_word_internal
  ;

: text_measure_glyph
  i := long font_table
  i += text_id
  i += text_id
  load v2 - v3 # load address of glyph
  reg_set_i_v23
  load v0 # load width
  text_x += text_glyph_width
  # v4 holds width
  ;


# v23 = word v4 = x1 v5 = y v6 = x2
: text_draw_word_centered
  push v2 v6 6
  text_measure_word
  v0 >>= v4
  pop v2 v6 6
  v6 >>= v6
  v4 >>= v4
  v4 += v6
  v4 -= v0
  text_draw_word
  ;

:macro text_draw_word_at w x y { i := long w load v2 - v3 v4 := x v5 := y text_draw_word }
:macro text_draw_word_centered_at w x1 x2 y { i := long w load v2 - v3 v4 := x1 v5 := y v6 := x2 text_draw_word_centered }
