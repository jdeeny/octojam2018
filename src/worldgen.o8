#v0 = worldx
#v1 = worldy
:alias roomcounter v2
:alias roomindex v3
#v4-v5 = pointer to floor tile
#v6 how many rooms we have placed in this row
: place-room
	i := long rooms
	v0 := random 7
	v0 <<= v0
	i += v0
	load v1
	i := gen-room-pointer save v1

	i := long worldgen-state
	load v0 - v6

	y += SEG_HEX_CONTENTS_UPPER

	loop
		0XF0 0x00 : gen-room-pointer 0x00 0x00
		i += roomindex
		load v7 - v7

		#empty tile
		if v7 == 0 then jump rooms-tile-cleanup
		#everything except empty tiles have floor tiles
		set-i-reg y x
		save v4 - v5

		if v7 == 2 then pick-monster
		if v7 == 3 then place-player
		: rooms-tile-cleanup
		HEX_RIGHT x y
		roomindex += 1
		roomcounter += 1
		if roomcounter == 8 begin
			y += 1
			x += -32 #8 tiles to the left
		end
		if roomcounter == 16 begin
			roomcounter := 0
			y += 1
			x += -36 #9 tiles to the left
		end
	if roomindex != 72 then again


	if v6 == 5 begin
		if y == 0xEF then jump room-cleanup
		jump room-choose-down
	end
	if y == 0xEF then
		jump room-choose-right

	v7 := random 1

	if v7 == 1 then
		jump room-choose-down

	: room-choose-right
		y += -5
		x += 40
	jump room-write
	: room-choose-down
		x += 8
	: room-write
	set-i-reg y x
	save v4 - v5

	: room-cleanup
	#prepare state for next room

	i := long worldgen-state
	load v0 - v6

	v6 += 1
	if v6 == 6 begin
		v6 := 0
		y += 10
		x += 20
	end
	x += 36
	i := long worldgen-state save v6
;


# v0 x
# v1 y
# v2 - v3 empty-tile pointer
# v4 - v5 wall-left pointer
# v6 - v7 wall-right pointer
# v8 - v9 wall-middle pointer
# va hex contents offset
# vb - vc tmp
: add-walls
	i := long wall-state
	load va
	: wall-loop
		x += 4
		if x == 0 begin

			y += 1
			:calc bounds { SEG_HEX_CONTENTS_UPPER + 31 }
			if y == bounds then return
		end

		set-i-reg y x load vb - vc
		#walls only live on blank tiles
		if vc == v3 then if vb != v2 then jump wall-loop


		#check floor to bottom right
		HEX_DOWN_RIGHT x y
		set-i-reg y x load vb - vc
		#if it's not blank, then we want to draw a wall
		if vc == v3 then if vb != v2 then jump wall-rhs-true

		#the right side is blank, but we want to check the left side
		HEX_LEFT x y
		set-i-reg y x load vb - vc
		if vc == v3 then if vb != v2 then jump wall-lhs

		: wall-blank
		
		HEX_UP_RIGHT x y
		jump wall-loop

		: wall-lhs

		HEX_UP_RIGHT x y
		set-i-reg y x i += va #pointing at object data
		save  v4 - v5
		jump wall-loop



		: wall-rhs-true
		HEX_LEFT x y
		set-i-reg y x load vb - vc
		if vc == v3 then if vb != v2 then jump wall-double

		: wall-rhs
		HEX_UP_RIGHT x y
		set-i-reg y x i += va #pointing at object data
		save  v6 - v7
		jump wall-loop

		: wall-double

		HEX_UP_RIGHT x y
		set-i-reg y x i += va #pointing at object data
		save  v8 - v9
		jump wall-loop

: pick-monster
	i := long pickmonster-tmp save v6
	
	generate_new_enemy

	x += HEX_CONTENTS_OFFSET

	set-i-reg y x save v2 - v3

	i := long pickmonster-tmp load v6
;
: place-player
	i := long place-player-data
	load v8 - vb
	#player is unique
	if v8 != 0 then return
	v8 := 1 save v8 - v8

	#put the player on the map
	x  += HEX_CONTENTS_OFFSET
	set-i-reg y x save v9 - va
	x += -2
;
: worldgen-setup
	i := long place-player-prototype
	load v0 save v0
	i := long worldgen-state-prototype
	load v6 save v6
	i := long clear-map-data
	load vc
	i := long hex-contents
	#copy to hex contents 682 times
	loop
		save vb
		vc += 1
		if vc != 0 then
	again
	loop
		save vb
		vc += 1
		if vc != 0 then
	again
	loop
		save vb
		vc += 1
		if vc != 170 then
	again
;